#!/bin/bash

# [[file:~/doc/projects/ABC.org::*%E6%9C%80%E7%BB%88%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%9A][the-ultimate-script]]

# The name abc stands for Android Build Cake. Android Build is a piece
# of Cake.

# All bash scripts should start with ~set -e~ to fail early and loudly.
set -e

if test "$ABC_REMOTE_HOST" = ""; then
    export ABC_REMOTE_HOST=abc
fi

export USE_CCACHE=1

if test -e ~/src/github/projects/ABC.org -a ~/src/github/projects/ABC.org -nt ~/bin/abc; then
    emacsclient -e '
        (progn
         (save-some-buffers t)
         (find-file "~/src/github/projects/ABC.org")
         (org-babel-tangle))' && touch ~/bin/abc && exec $0 "$@"
fi


die() {
    (
        echo $(date): "($ABC_USER $SSH_ORIGINAL_COMMAND)" Error: "$@"
        echo
    ) |
        (
            flock ~/.logs/abc.err.lock tee -a ~/.logs/abc.err.txt
        )
    exit -1
}

repo() {
    ~/bin/repo "$@"
}

is-a-subdir() {
    dir1=$(readlink -f "$1")
    dir2=$(readlink -f "$2")
    # test if dir1 is in a subdir of $dir2
    dir2=$dir2/
    if test -e "$dir1" -a -d "$dir2"; then
        if test "$(echo "$dir1" | cut -b 1-${#dir2})" = "${dir2}"; then
            return 0;
        fi
    fi
    return 1
}

info() {
    if test $# = 0; then
        perl -npe 's/^/    /'
    else
        echo $(date): "$@"
    fi |
        (
            flock ~/.logs/abc.info.lock tee -a ~/.logs/abc.info.txt ~/.logs/abc.info.txt.$$ >/dev/null 2>&1
            (
                rm -f ~/.logs/abc.info.txt.$$
                cat
            ) < ~/.logs/abc.info.txt.$$
        ) 1>&2
}
function killlock() { # can kill run-away abc tasks.
    get-base-build "$@"

    (
        cd "$base_build"
        dump1lock .abc.lock|
            while read pid ppid etime command; do
                if test "$ppid" = 1; then
                    echo will now kill $pid: $command
                    (
                        set -x
                        kill $pid
                        sleep 1
                        kill -9 $pid
                        sleep 1
                        ps $pid || true
                    )

                fi
            done
    )
}

get-base-build() {
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base
    ## end code-generator
    ## start generated code
    local base=
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    base=${base%%/*}
    base_build=~/buildfarm/$base
    if test "$base" -a "$base" != .. -a -d "$base_build"; then
        true
    else
        die "Invalid base build: $base_build"
    fi
}

dump1lock() {
    if test $# != 1; then
        die "dump1lock usage error"
    fi
    if fuser "$1" >/dev/null 2>&1; then
        echo "These processes are using $1"
        (fuser "$1" |grep . || echo 1) |
            xargs ps -o pid,ppid,etime,command |
            cut -b 1-120 |
            perl -a -ne '
                if (1..1) {
                    print;
                    next;
                }
                chomp;
                printf "%-125s", $_;
                system("cat /proc/$F[0]/environ|tr \\\\0 \\\\n|grep ABC_USER|perl -npe \"s/.*=//\"")
            '

    fi
}

function dumpsys() { # dump the system state (e.g., who is locking the base build?)
    get-base-build "$@"
    (
        cd "$base_build"

        dump1lock .abc.lock
        for x in ???/.android-full-build.lock; do
            dump1lock $x
        done
        uptime
    )
}


clear_all_old_patches() {
    echo clear_all_old_patches
    local repo_dir=$(lookup-file -e .repo)
    mkdir -p $repo_dir/patches
    for x in $(
                  cd $repo_dir/patches >/dev/null 2>&1;
                  for x in *; do
                      if test -f $x; then
                          echo *
                      fi
                  done
              ); do

        (
            cd $repo_dir/..
            project=${x//%/\/}
            echo clearing old patches in $project
            cd $project
            if test ! -d .git; then
                die "not a project: $project"
            fi

            git reset --hard $(repo-remote-branch)
            git clean -xfd
        )
    done
    rm $repo_dir/patches -rf
}

mark_a_patch() {
    local repo_dir=$(lookup-file -e .repo)
    mkdir -p $repo_dir/patches
    local project=$1
    (
        cd $repo_dir/patches
        touch ${project//\//%}
    )
}


get-base-build-from-branch() {
    local branch=$1
    if test -e ~/buildfarm/."$branch"; then
        readlink -f ~/buildfarm/."$branch"
    elif test -d ~/buildfarm/"$branch"; then
        echo ~/buildfarm/"$branch"
    else
        die "Can't decide the base build for branch: '$branch'"
    fi
}


psync() {
    if test "$testabc" = true; then
        echo testing abc
    else
        return 0
    fi
    command psync "$@" >/dev/null 2>&1 </dev/null
}
ssh() {

    (
        if test "$1" = code3; then
            shift
            set -- abc@172.16.2.25 "$@"
        fi
        if test $dryrun = true; then
            echo ssh "$@" | tee /dev/stderr | putclip
        fi
    )

    if test $dryrun = true; then
        exit
    fi
    if test $USER = bhj -a -e ~/.ssh/id_rsa_nopass; then
        unset SSH_AGENT_PID SSH_AUTH_SOCK
        command ssh -i ~/.ssh/id_rsa_nopass "$@"
    else
        command ssh "$@"
    fi
}

function remote-mm() { # submit a remote build request, preferably using 'mm'
    if echo $SHELLOPTS | grep -q xtrace; then
        export SHELLOPTS
    fi

    if test $(pwd) = ~/src/linux; then
        echo doing my linux hack
        command psync -S -t ~/src/android/kernel/ localhost .
        cd ~/src/android/kernel/
        remote-mm "$@"
        exit
    fi

    declare -a repo_dirs

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l xdebug d:dir m:make=mm a:add
    ## end code-generator
    ## start generated code
    local debug=false
    local dir=
    local make=mm
    local add=
    local OPTIND=1
    while getopts 'xd:m:a:' opt; do
        case "$opt" in
            x)    debug=true;;
            d)    dir=$OPTARG;;
            m)    make=$OPTARG;;
            a)    add=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ${#repo_dirs[@]} = 0; then
        repo_dirs=($PWD)
    fi

    get-all-urls() {
        local x
        gerrit-push-review() {
            command gerrit-push-review "$@" </dev/null
        }

        for x in "${repo_dirs[@]}"; do
            (
                cd "$x"
                (
                    if git st -s | grep .; then
                        if gerrit query --current-patch-set $(gerrit-review-url |perl -npe 's!.*/!!') 2>/dev/null|grep 'status: DRAFT'; then
                            git commit --no-edit --amend -a >/dev/null 2>&1
                        else
                            git add .
                            git commit -m 'abc test build' -a
                        fi
                        gerrit-push-review -n -R -d
                    fi
                    if [[ "$(gerrit-review-url)" =~ //[^/]*$  ]]; then
                        gerrit-push-review -n -R -d
                    fi
                ) >/dev/null 2>&1
            )
            gerrit-review-url
        done
    }

    if test "$USER" = bhj; then
        psync
    fi

    local xdebug=
    if test $debug = true || echo $SHELLOPTS | grep -q xtrace; then
        xdebug=-x
    fi
    ssh -o RequestTTY=yes $ABC_REMOTE_HOST abc $xdebug build-request $(get-all-urls) -m $make $add
}


lock-base-build() {
    exec 9> $base_build/.abc.lock
    echo "Will now try to lock: " "$@"
    flock 9
    echo "Locked."
}

lock-file() {
    exec 9> $1
    shift
    echo "Will now try to lock: " "$@"
    flock 9
    echo "Locked."
}

copy-output-files() {
    echo "$@"
    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l t:target
    ## end code-generator
    ## start generated code
    local target=
    local OPTIND=1
    while getopts 't:' opt; do
        case "$opt" in
            t)    target=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code
    target=~/buildfarm/.abc-output/$(basename $base_build)/$target

    mkdir -p $target
    rsync "$@" $target/ -av --delete

    (

        if test -z "$ABC_USER"; then
            info "no ABC_USER is set, should exit"
            exit
        fi
        cd $target/
        export ABC_USER_OUTPUT=../by-user/$ABC_USER/$(basename $target)
        find . -type d | perl -ne 'use File::Path qw(make_path); chomp; make_path("$ENV{ABC_USER_OUTPUT}/$_")'
        find . -type f | perl -ne 'chomp; link $_, "$ENV{ABC_USER_OUTPUT}/$_"'
        rsync . $ABC_USER_OUTPUT -av --delete
        smb_folder=$(readlink -f $ABC_USER_OUTPUT | perl -npe 's,^/Share,smb://172.16.2.25,')
        echo "Please get your files at: $smb_folder"
        if [[ "$ABC_USER" =~ baohaojun@.* ]]; then
            echo 'for x in $(getclip); do (set -x; adb-push '$smb_folder'/$x); done'
        fi
    )

}

function repo-cherry-find-all() { # find all patches that needs
                                  # cherry-picking between 2 branches.

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base f:from t:to ssync
    ## end code-generator
    ## start generated code
    local base=
    local from=
    local to=
    local sync=false
    local OPTIND=1
    while getopts 'b:f:t:s' opt; do
        case "$opt" in
            b)    base=$OPTARG;;
            f)    from=$OPTARG;;
            t)    to=$OPTARG;;
            s)    sync=true;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ! -d ~/buildfarm/"$base"/bionic/.git; then
        die "Invalid base build: $base"
    fi

    local base_build=~/buildfarm/"$base"
    (
        cd ~/buildfarm/"$base"
        lock-base-build "sync the repos"

        if test "$sync" = true; then
            my-rfa 'pwd; git fetch $(repo-remote)'
        fi
    )

    (
        cd ~/buildfarm/"$base"
        mkdir -p out/diff
        lock-file out/diff/repo-cherry-find-all.lock "will now lock for repo-cherry-find-all"
        command repo-cherry-find-all -f $from -t $to
        base_build=~/buildfarm/"$base"
        copy-output-files -t repo-cherry-find-all out/diff
    )
}


function test-cat() {
    cat
}

mm() {
    echo doing mm in $PWD

    local extra=
    if test "$xdebug"; then
        extra=-v
    fi
    command mm $extra -j8 "$@"
}
android-make() {
    echo doing android-make in $PWD: $@
    local extra=
    if test "$xdebug"; then
        extra=-v
    fi
    command android-make $extra -j8 "$@"
}

copy-compile-output-files() {
    copy-output-files -t "$(basename $(readlink -f out))" \
                      out/target/product/*/system* \
                      out/target/product/*/boot* \
                      out/target/product/*/root \
                      out/target/product/*/emmc_appsboot.mbn \
                      $extra |
        grep -v '/$'

}

function build-request() { # submit a build request
    ## start generated code
    TEMP=$(getopt -o b:m:hd:p: --long "base,method:,help,dir:,patch-dir:"  -n $(basename $0) -- "$@")
    method=mm
    mm_dir=
    local base_build
    local base
    local patch_dir
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -m|--method)
                method=${2,,}
                shift 2
                ;;
            -b|--base)
                base=${2%%/*} # make sure there are no /
                shift 2
                ;;
            -p|--patch-dir)
                patch_dir=$2
                shift 2
                ;;
            -h|--help)
                cat <<EOF
Usage: build-request -b|--base BASE-BUILD-NAME \
       -m|--method [mm|dep|full] \
       [-d|--dir MM_DIR] \
       [-c|--copy FILE|DIR]... \
       [-t|--to COPY_TARGET] \
       [REVIEWS]... \
       [-p|--patch PATCH_DIR]

You can use this command to submit a build request using a gerrit
review, specify what to build, and what to copy back into your PC
using share folder.

-b|--base BASE-BUILD-NAME

    BASE-BUILD-NAME means the base build to use for building your
    patch. You can use lbb to list the base builds available.

    If not specified, you must specify one or more reviews, and the
    base build will be calculated from the reviews.

-m|--method [mm|dep|full|fullbase|kernel|lk|bootimage]
    MM means use android mm build
    DEP means build the whole dir, including DEPendencies
    FULL means to do a full build (need 10~15 minutes)
    FULLBASE means repo sync the base and do a full build
    KERNEL means to rebuild kernel and re-generate boot.img
    MODULES means to do the KERNEL and the wlan.ko
    BOOTIMAGE means to build the boot.img (kernel, ramdisk, etc)
    LK means to build the little kernel boot loader

    Default is mm.

[-d|--dir MM_DIR] Specify where to do the build, if you are using mm
    or partial build with dependencies resolved.

    Default is the git project if there is an Android.mk in it's top
    folder.

REVIEWS are gerrit review urls or ids, such as
http://172.16.0.9:8080/47807/ or 47807. All reviews must be for the
same base build (with the same gerrit branch). If you are using patch
files for build request, then no reviews are required.

EOF
                exit
                ;;
            -d|--dir)
                mm_dir=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error"
                ;;
        esac
    done
    ## end generated code

    num_reviews=$#

    target_branch=

    declare -A review_patchset_map
    local old_review_id

    if test "$patch_dir" -a $# != 0; then
        die "Can't build with both patches and reviews"
    fi

    if test "$patch_dir" -a "$base" -a "$base" != ..; then
        base_build=~/buildfarm/"$base"
        if test ! -d "$base_build"; then
            die "Invalid base build: $base_build"
        fi

        if ! is-a-subdir $base_build ~/buildfarm/; then
            die "Invalid base build: $base_build"
        fi
        cd $base_build
        tee /tmp/abc-patch.$$
        lock-base-build "for build request"

        clear_all_old_patches

        (
            cd $patch_dir

            if ! is-a-subdir "$(lookup-file -e .git/..)" $base_build; then
                die "Invalid patch dir: $patch_dir"
            fi
            mark_a_patch $(ap $(lookup-file -e .git/..))

            (
                patch_dir=$(ap)
                cd $(lookup-file .repo)
                git init abc-patches || true
                cd abc-patches
                mkdir -p $ABC_USER/$patch_dir
                cp /tmp/abc-patch.$$ $ABC_USER/$patch_dir/patch
                git add .
                git commit -m 'submit patch for build' --allow-empty
            )

            (
                cat /tmp/abc-patch.$$; rm -f /tmp/abc-patch.$$
            ) | patch -p 1
        )

    fi


    for review_id in "$@"; do
        old_review_id=$review_id
        if [[ "$review_id" =~ http:// ]]; then
            review_id=$(basename "$review_id")
        fi

        if ! echo "$review_id" | grep -q -P '^\d+$'; then
            die "review_id $review_id is not a number."
        fi

        review_info=$(ssh smartisan gerrit query --current-patch-set $review_id)
        branch=$(echo "$review_info" | grep "^\s+branch:" -P | pn 2)
        project=$(echo "$review_info" | grep "^\s+project:" -P | pn 2)
        patchset=$(echo "$review_info" | grep "^\s+ref:" -P | pn 2 | xargs basename)

        review_patchset_map[$old_review_id]=$review_id,$patchset

        if test ! "$target_branch"; then
            target_branch=$branch
            if test ! "$branch"; then
                die "Can't determine branch from then review"
            fi

            base_build=$(get-base-build-from-branch $target_branch)
            lock-base-build decided our base_build to be $base_build, will lock now


            (
                cd $base_build
                clear_all_old_patches
                if test "$method" = fullbase; then
                    2nd repo sync -j4 -d
                fi
            )



        elif test "$target_branch" != "$branch"; then
            die "Your reviews have more than 1 branches: $target_branch and $branch"
        fi



        cd "$base_build"
        path=$(my-rfa 'if test "$(git-remote-url|perl -npe s,.*//.*?/,,)" = '$project'; then pwd; fi')
        if test ! -d "$path"; then
            die "Can't decide the path for review id: $review_id"
        fi

        (
            cd "$path"
            rev=$(echo "$review_info" | grep "^\s+ref:" -P | pn 2)
            git reset --hard
            git fetch $(repo-remote) $rev
            git merge --no-edit FETCH_HEAD || die "Can't merge the fetch head"
            mark_a_patch $(ap)
        )
    done

    if test "$method" = mm; then
        if test $num_reviews != 1 && test ! -d "$mm_dir"; then
            if test "$num_reviews" = 0 && test "$patch_dir"; then
                true
            else
                die "mm can be used only if there is one review patch"
            fi
        fi

        if test -d "$mm_dir"; then
            (
                if ! is-a-subdir "$(readlink -f "$mm_dir")" "$base_build"; then
                    die "$mm_dir is not in Android dir"
                fi
                cd "$mm_dir"
                mm
            )
        elif test -e "$path"/Android.mk; then
            (
                cd $path
                mm;
            )
        else
            die "Can't find Android.mk in $path for mm build"
        fi
    elif test "$method" = dep; then
        if test -d "$mm_dir"; then
            (
                if ! is-a-subdir "$(readlink -f "$mm_dir")" "$base_build"; then
                    die "$mm_dir is not in Android dir"
                fi
                cd "$mm_dir"
                android-make -d .
            )
        else
            (
                cd $path
                android-make -d .
            )
        fi
    elif test "$method" = full -o "$method" = fullbase; then
        android-make
    elif test "$method" = lk; then
        android-make lk
    elif test "$method" = kernel -o "$method" = modules; then
        (
            cd kernel
            if git diff $(repo-remote-branch) --name-status | grep \\.dtsi; then
                echo should touch dts files
                cd arch/arm/boot/dts
                touch *
            fi
        )
        android-make msm-kernel &&
            if test "$method" = modules; then
                (cd vendor/qcom/opensource/wlan/prima && mm)
            fi
    elif test "$method" = bootimage; then
        android-make bootimage
    else
        die "Can't build with method '$method'"
    fi || {
        for review_id in "$@"; do
            (
                gerrit-build-review "$review_id" -1
            )
        done
        exit
    }

    for review_id in "$@"; do
        (
            set -x
            gerrit-build-review "$review_id" +1
        )
    done

    local extra=
    if test -e .repo/manifest.xml.base; then
        extra=.repo/manifest.xml.base
    fi

    copy-compile-output-files
}

function list-base-builds() { # list base builds
    if test ! "$SSH_CLIENT"; then
        ssh $ABC_REMOTE_HOST abc list-base-builds
        exit
    fi
    cd ~/buildfarm/
    for x in *; do
        if test -d "$x"; then
            echo "$x"
        fi
    done
}

function lbb() { # alias for lbb
    list-base-builds
}

abc-notify-maintainer() {
    info Will now send email to maintainer: "$@"
    /usr/bin/mailx -r baohaojun@gmail.com "$@" baohaojun@smartisan.com   < /dev/null
    return 1
}

function cron-daily-build() { # do a daily build using cron. do not submit this task!
    . ~/.config/ssh-agent

    (
        local x
        for x in "$@"; do
            if test "$x" = -b; then
                exit # don't if we are testing with a base build.
            fi
        done
        cd /data/mirror
        if test ! -e .owned-by-abc; then
            exit
        fi
        if is-tty-io; then
            exit
        fi

        for x in $(ssh smartisan gerrit ls-projects); do
            if test ! -d $x.git; then
                git init --bare $x.git
            fi
            (
                cd $x.git
                remote=abc-$(echo $x|md5sum|cut -b 1-3)
                git remote add $remote smartisan:$x || true
                git fetch $remote
            ) || true
        done
    ) || true

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l b:base_builds
    ## end code-generator
    ## start generated code
    local -a base_builds=()
    local OPTIND=1
    while getopts 'b:' opt; do
        case "$opt" in
            b)    base_builds=("${base_builds[@]}" "$OPTARG");;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test ${#base_builds[@]} = 0; then
        base_builds=(
            $(
                cd ~/buildfarm/
                for x in *; do
                    echo $x
                done | sort
            )
        )
    fi


    for b in "${base_builds[@]}"; do
        d=~/buildfarm/$b
        local base_build=$d
        if test ! -d "$d"; then
            continue;
        fi

        if test -L "$d"; then
            continue;
        fi
        (
            cd "$d"/.repo/manifests
            git reset --hard
        )
        (
            cd "$d"
            lock-base-build "Will do cron daily build now"

            if ! is-tty-io; then
                repo sync -j8 -d || (
                    info "repo sync failed with $?"
                    my-rfa "git reset --hard; git clean -xfd" &&
                        repo sync -j8 -d
                ) || abc-notify-maintainer -s "repo sync failed for $PWD: $?" || continue

                repo manifest -r -o .repo/manifest.xml.sync
                if test -e .repo/manifest.xml.base && diff -q .repo/manifest.xml.base .repo/manifest.xml.sync; then
                    info "The repo of $PWD don't need update"
                    exit 0
                elif test -e .repo/manifest.xml.base; then
                    info Will need to update the build in $PWD:
                    diff .repo/manifest.xml.base .repo/manifest.xml.sync | info
                fi
            fi

            for config in $(
                               for x in .repo/out-*-{eng,userdebug}; do
                                   if test "${x##*-}" = userdebug; then
                                       local user_later=false
                                       if test -d "$x"; then
                                           mkdir -p "${x%-*}"-user
                                       fi
                                       if [[ $(basename $base_build) =~ mol ]]; then
                                           user_later=true
                                       else
                                           echo "${x%-*}"-user
                                       fi
                                   fi
                                   echo $x
                                   if test $user_later = true; then
                                       echo "${x%-*}"-user
                                   fi
                               done | uniq-even-non-ajacent
                           ); do
                if test ! -d "$config" -o -e "$config/no-cron-build"; then
                    continue
                fi
                config=${config#.repo/out-}
                (
                    info will build $config at $base_build
                    android-make -c $config
                    ret=$?
                    if test $ret = 0; then
                        info new build is ok, will update the build manifest.
                        cp .repo/manifest.xml.sync .repo/manifest.xml.base
                        cat .repo/manifest.xml.base > .repo/manifest.xml
                        copy-compile-output-files
                    fi
                    exit $ret
                ) || (
                    if test -e .repo/manifest.xml.base && ! diff -q .repo/manifest.xml .repo/manifest.xml.base; then
                        (
                            info need to try old build
                            cat .repo/manifest.xml.base > .repo/manifest.xml
                            repo sync -j8 -d
                            android-make -c $config
                            ret=$?
                            if test $ret = 0; then
                                copy-compile-output-files
                            fi
                            exit $ret
                        ) || abc-notify-maintainer -s "Full build failed again for $PWD: $config" -a buildspec.mk
                    else
                        abc-notify-maintainer -s "Full build failed and no old base xml found for $PWD: $config" -a buildspec.mk
                    fi
                ) || true
            done
            (
                if ! is-tty-io; then
                    mkbeagrepidx&
                    SOURCECODETAGSMODE=true mkbeagrepidx
                    wait
                fi
            ) 9>/dev/null
        )
    done
}

gerrit-build-review() {
    review_id=$1
    review_patch=${review_patchset_map[$review_id]}


    verified=${2:-1}
    if test "$verified" = +1; then
        message=$(
            cat <<EOF
This is an automated message from the Android Build Cake.

Everything merges and builds. Congratulations!
EOF
               )
    else
        message=$(
            cat <<EOF
Build failed.

This is an automated message from the Android Build Cake.

Please check the build log with this abc command:

    $(
        for x in "${abc_command[@]}"; do
            printf "%q " "$x"
        done
    )
EOF
               )
    fi
    set -x
    ssh -i ~/.ssh/id_rsa_cmtest cmtest@code -p 29418 gerrit review "$review_patch" --verified $verified -m \'"${message//\'/\'\\\'\'}"\'
}

function abc-files() { # use beagrep to find matching files, for e.g.,
                       # abc-files "readlink" will list all files that
                       # contains readlink.
    ## start generated code
    TEMP=$(getopt -o b: --long "base:"  -n $(basename $0) -- "$@")
    local base=
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -b|--base)
                base=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error"
                ;;
        esac
    done

    ## end generated code

    if test ! "$base"; then
        base=sfo-rom
    fi

    if test ! -d ~/buildfarm/"$base"; then
        die "no such base build: $base"
    fi

    cd -P ~/buildfarm/"$base"
    beagrep-files "$@" | cut -b $((${#PWD} + 2))-
}


function create-slave() { # create a slave on another build, requires
                          # admin privilege



    ## start code-generator "^\\s *#\\s *"
    # generate-getopts -l s:slave
    ## end code-generator
    ## start generated code
    local slave=
    local OPTIND=1
    while getopts 's:' opt; do
        case "$opt" in
            s)    slave=$OPTARG;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test "$slave" = ""; then
        die "slave not specified"
    fi

    cd ~
    . ~/.config/ssh-agent
    command psync $slave system-config
    command psync $slave external
    command psync $slave cpan
    (
        cd ~/src/github/
        command psync $slave external-local
        command psync $slave twittering-mode
        command psync $slave weibo.emacs
    )

    rsync .ssh $slave: -av --exclude .ssh/known_hosts --exclude=.ssh/.git --delete
    echo slave created.
}


function rm-non-build-files-kernel() {

    if ! echo "$ABC_USER" | grep -q baohaojun; then
        die "This function can only be run by admin,
you can find a branch with git branch -a | grep non-build"
    fi

    get-base-build "$@"
    cd $base_build/
    lock-base-build "rm-non-build-files-kernel"
    cd kernel
    clear_all_old_patches
    mark_a_patch $(ap)
    . ~/.bash-path
    bash -x rm-non-build-files-kernel
    git add .
    git commit -s -m 'with non build files removed'
    git push $(repo-remote) HEAD:refs/heads/sandbox/$(my-rfa '$(lookup-file .repo/repo_info.pl) upstream')-bhj-rm-non-build -f
}

function help() {

    perl -ne 'print if m/^\s*function.*# / ... (m/^\s*$/ or not m/^\s*#/)' $0 |
        perl -ne 'if (m/^\s*function|^\s*#/) {print} else {print "\n"}' |
        grep -v '## start generated code'

    echo; echo

    if yes-or-no-p -y "Show the help manual page?"; then
        xdg-open http://172.16.0.251/baohaojun/blog/2015/03/06/0-abc-usage-manual.html
    fi
}

function remote-abc() { # run a remote abc command, such as abc-files
    if test "$USER" = bhj -a -e '/home/bhj/src/github/projects/ABC.org'; then
        (
            cd
            psync </dev/null
        )
    fi
    ssh $ABC_REMOTE_HOST abc "${@//[^-.a-z0-9:\/_ ]/ }"
}

if test "$(readlink -f "$BASH_SOURCE")" = "$(readlink -f "$(echo "$0" | grep / || which "$0" 2>/dev/null)" )"; then

    ## start code-generator "^\\s *#\\s *"
    # generate-getopts xdebug ttestabc ddryrun XDEBUG
    ## end code-generator
    ## start generated code
    debug=false
    testabc=false
    dryrun=false
    DEBUG=false
    OPTIND=1
    while getopts 'xtdX' opt; do
        case "$opt" in
            x)    debug=true;;
            t)    testabc=true;;
            d)    dryrun=true;;
            X)    DEBUG=true;;
            *)    echo Usage Error;;
        esac
    done
    shift $(($OPTIND - 1))

    ## end generated code

    if test "$debug" = true; then
        export xdebug=true
        set -x
    elif test "$DEBUG" = true; then
        export xdebug=true
        set -x
        if echo $SHELLOPTS | grep -q xtrace; then
            export SHELLOPTS
        fi
    else
        unset xdebug
    fi

    if test $testabc = true; then
        export ABC_REMOTE_HOST=code3
    fi

    if grep -q -P "^\s*function $1\s*\(" "$0" || test "$(basename $0)" = $1; then
        command=$1
        shift
        abc_command=("$command" "$@")
        "$command" "$@"
     else
         die "$1: abc command not found"
    fi
fi

# the-ultimate-script ends here
