#!/bin/bash

myname=$(basename $0)

function die() {
    echo Error: "$@"
    exit -1
}

if which the-true-adb >/dev/null 2>&1; then
    the_prog=$(which the-true-adb)
else
    die "the true adb is not found"
fi

export the_prog

$the_prog start-server >/dev/null 2>&1

if test -z "$the_prog"; then
    die "Error, the adb is not found"
fi

function adb() {
    if test "$1" = -w; then
        echo -n 'wait-for-device ' 1>/dev/tty
        $the_prog wait-for-device
        shift
    fi

    if test "$1" = -W; then
        # wait for device using a loop
        for x in $(seq 1 ${2:-60}); do
            sleep 1
            if test $(adb devices |grep -v 'List of devices attached'| grep $ANDROID_SERIAL. | wc -l) -gt 0; then
                exit 0;
            fi
        done
        exit 1
    fi

    if test "$1" = -r && ! adb devices?|grep -v :; then
        shift;
    fi
    if test "$1" = -r; then
        echo -n 'wait-for-device ' 1>/dev/tty
        $the_prog wait-for-device

        if $the_prog root 2>&1 | grep 'restarting adbd as root'; then
            while true; do
                echo -n '.' 1>/dev/tty
                $the_prog wait-for-device
                if adb shell id | grep uid=0 -q; then
                    break
                fi
            done
        fi
        shift
    fi

    if test "$#" = 1 -a "$1" = remount; then
        the-true-adb remount
        command adb shell su -c 'mount -o rw,remount /system; mount | grep /system'
        exit
    fi

    if test "$#" = 1 -a "$1" = 'devices?'; then
        if the-true-adb devices | grep -v 'List of devices attached' | grep .; then
            exit 0
        else
            exit 1
        fi
    fi

    if test "$#" = 1 -a "$1" = romount; then
        command adb shell su -c 'mount -o ro,remount /system; mount | grep /system'
        exit
    fi

    if test $# = 1 -a "$1" = disconnect; then
        exec the-true-adb disconnect;
    fi

    if test $# = 1 -a "$1" = reconnect && grep : -q ~/.config/adb-device; then
        exec the-true-adb connect $(cat ~/.config/adb-device)
    fi

    if test $# = 2 -a "$1" = e; then
        exec e /adb::"$2"
    fi

    if test "$1" = -S; then
        echo "$(select-output-line -- '(
            devices=$(adb devices 2>&1 | perl -ne "print unless 1..1"|pn 1);
            old_dev=$(cat ~/.config/adb-device 2>/dev/null);
            (
                for x in $devices; do
                    if test "$x" = "$old_dev"; then
                        echo "$old_dev"
                    fi
                done
                echo "$devices"
            ) | uniq-even-non-ajacent)')" > ~/.config/adb-device.$$
        mv ~/.config/adb-device.$$ ~/.config/adb-device
        shift
        if test "$#" = 0; then
            exit
        fi
        export ANDROID_SERIAL=$(cat ~/.config/adb-device)
    elif test "$1" != devices -a -z "$ANDROID_SERIAL"; then
        setsid $the_prog start-server >/dev/null 2>&1 ;
        devices=(
            $($the_prog devices | perl -ne 'print unless 1..1' | pn 1)
        )
        if test ${#devices[@]} -gt 1; then
            if test ! -e ~/.config/adb-device || ! echo ${devices[@]} | grep -q $(cat ~/.config/adb-device); then
                command adb -S
            fi
            export ANDROID_SERIAL=$(cat ~/.config/adb-device)
        else
            export ANDROID_SERIAL=$devices
        fi
    fi

    if test $# = 2 -a "$1" = shell; then # adb shell 'echo hello world'
        exec adb shell sh -c "$2"
    fi

    if test "$2" = su -a "$1" = shell; then
        ro_sn=$ANDROID_SERIAL
        if echo $ro_sn|grep : -q; then # 172.0.0.1:5555 tcp
            set -x
            ro_sn=$(adb-ntty getprop ro.serialno)
            set +x
        fi
        if test ! -e ~/.config/adb-use-sh-as-su/yes/$ro_sn \
            -a ! -e ~/.config/adb-use-sh-as-su/no/$ro_sn; then
            if yes-or-no-p -y "Use sh as su?"; then
                mkdir -p ~/.config/adb-use-sh-as-su/yes
                touch ~/.config/adb-use-sh-as-su/yes/$ro_sn
            else
                mkdir -p ~/.config/adb-use-sh-as-su/no
                touch ~/.config/adb-use-sh-as-su/no/$ro_sn
            fi
        fi
        if test -e ~/.config/adb-use-sh-as-su/yes/$ro_sn; then
            shift 2
            echo using sh as su 1>&2
            set -- shell sh "$@"
        fi
    fi

    if test "$1" = restart; then
        adb shell "$@"
        return 0;
    fi

    if test "$1" = gdbserver; then
        shift
        gdbserver "$@"
    elif test "$#" = 3 -a "$1" = shell -a "$2" = restart; then
        $the_prog shell stop $3;
        exec $the_prog shell start $3;
    elif test $# -gt 1 -a "$1" = shell; then
        if ! is-tty-io;then
            if test $myname = adb; then
                exec $the_prog "$@" | tr -d '\r'
            elif test $myname = adb-quote; then
                args=()
                for x in "$@"; do
                    args=("${args[@]}" $(printf %q "$x"))
                done

                exec $the_prog ${args[@]} | tr -d '\r'
            fi
        else
            shift
            exec adb-expect "$@"
        fi
    else

        adb_commands=(backup bugreport emu forward get-devpath
            get-serialno get-state help install jdwp kill-server
            logcat ppp pull push reboot reboot-bootloader remount
            restore root shell start-server status-window sync tcpip
            uninstall usb version wait-for-device devices connect
            disconnect)

        is_adb_command=false

        for x in "${adb_commands[@]}"; do
            if test "$1" = $x; then
                is_adb_command=true;
                break
            fi
        done

        if test $is_adb_command = true; then
            exec $the_prog "$@"
        elif test $# -gt 0 -a "${1:0:1}" != -; then # should not do adb -s xxx
            exec adb shell "$@"
        else
            exec $the_prog
        fi
    fi
}

function gdbserver() {
    port=3333
    TEMP=$(getopt -o p:P: --long process:port: -n $(basename $0) -- "$@")
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -p|--process)
                process=$2
                shift 2
                ;;
            -P|--port)
                port=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error"
                ;;
        esac
    done
    if test "$process" -a $# != 0; then
        die "Error: Usage $(basename $0) -p process -P port, or, $(basename $0) -P port CMD ARGS"
    fi
    if test "$process"; then
        pid=$(select-output-line -- bash -c 'adb shell ps |grep -P -e "\Q'$process'\E"'|pn 2)
        exec $the_prog shell gdbserver --attach :$port $pid
        return 0;
    fi
    $the_prog forward tcp:$port tcp:$port || true
    exec $the_prog shell gdbserver :$port "$@"
}
adb "$@"
