#!/bin/bash

if test "$DEBUG" = true; then
    set -x
fi
if test "$PWD" = ~; then
    cd ~/system-config/
fi

cd $(dirname $(lookup-file -e .git))

function git-diff() {
    clear

    if test "$FOR_REVIEW"; then
        if git diff -w $(repo-remote-branch) HEAD "$@" | grep -q .; then
            git diff -w $(repo-remote-branch) HEAD "$@"
        else
            read -p "$@ seems contain only whitespace changes, press Enter to continue...  "
        fi
        return 0
    fi

    if git status -s "$@" | grep -q -P -e '^\?\?'; then
        read -p "$@ seems to be a new file, press Enter to continue...  "
        diff /dev/null "$@"
    else
        if git diff -w "$@" | grep -q .; then
            git diff -w "$@"
        else
            read -p "$@ seems contain only whitespace changes, press Enter to continue...  "
        fi
    fi
}

IFS=$'\n'
for x in "$@" $(
    if test $# == 0; then git st -s |grep '^.\S' -P | cut -b 4-; fi
    if test "$FOR_REVIEW"; then
        git diff $(repo-remote-branch) HEAD --name-status | perl -npe 's/^\S+\s+//'
    fi
); do
    if test "${x:0:1}" = \" && yes-or-no-p -y "Eval $x?"; then
        eval "x=$x"
        echo "x changed to '$x'"
    fi
    if test -d "$x"; then
        continue
    fi
    if test ! -e "$x" && git st -s |grep -P -e "\Q$x\E" | grep "^RM"; then
        x=$(git st -s |grep -P -e "\Q$x\E" | grep "^RM" | perl -npe 's/.*-> //')
    fi
    if test ! -e "$x" && git st -s "$x" | grep -P -e '^ D|^D' && yes-or-no-p "$x removed, remove it from git?"; then
        git rm "$x"
        continue
    fi
    git-diff "$x";
    while true; do
        out=$(select-args yes no discard diff delete edit "@ $PWD/$x");
        if test "$out" = diff; then
            git-diff "$x";
            continue;
        fi

        if test "$out" = delete; then
            rm "$x"
            break
        fi

        if test "$out" = edit; then
            ew "$x"
            find-or-exec konsole
            if test ! -e "$x"; then
                break
            fi
            git-diff "$x";
            continue
        fi

        if test "$out" = no; then
            break
        fi

        if test "$out" = discard; then
            git co "$x"
            break
        fi

        if test "$out" = yes; then
            git add "$x"
        elif test "${out:0:1}" != @; then
            git add "$x"
            echo $(gitp "$x"): $out >> $(lookup-file-dir -e .git)/.commit-msg-bhj
        fi
        break
    done
done

. .gitx
git submodule foreach $0
