#!/bin/bash
function die() {
    echo Error: "$@"
    exit -1
}

PATH_PREPEND=
TEMP=$(getopt -o p: -n $(basename $0) -- "$@")

eval set -- "$TEMP"
while true; do
    case "$1" in
        -p)
            if test "$PATH_PREPEND"; then
                PATH_PREPEND="$PATH_PREPEND:$2"
            else
                PATH_PREPEND=$2
            fi
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

time (
    set -e
    set -o pipefail
    build_env=$(lookup-file build/envsetup.sh)
    top_dir=$(dirname $build_env)
    top_dir=$(readlink -f $top_dir/..)

    cd $top_dir/
    perl -npe 's!^\$\(error stopping\)!#\$(error stopping)!' -i build/core/main.mk
    . build/envsetup.sh
    set_stuff_for_environment
    cd -

    cd "$(dirname $(lookup-file Android.mk))"
    ONE_SHOT_MAKEFILE=$(readlink -f $PWD/Android.mk)
    export ONE_SHOT_MAKEFILE=${ONE_SHOT_MAKEFILE:1+${#top_dir}}

    cd $top_dir

    export build_mount_p=$(readlink -f ../)/.afb
    mkdir -p $build_mount_p
    if test -e ~/.no-sudo; then
        function sudo() {
            while test "$1" != bash; do
                shift
            done
            "$@"
        }
        export -f sudo
        export build_mount_p=$PWD
        function mount() {
            true
        }
        function su() {
            while test "$1" != -c; do
                shift
            done
            bash "$@"
        }
        export -f su
        export -f mount
    else
        function sudo() {
            if test "$KERNEL_CONFIG"; then
                command sudo env KERNEL_CONFIG=$KERNEL_CONFIG PATH=$PATH "$@"
            else
                command sudo env PATH=$PATH "$@"
            fi
        }

        export -f sudo
    fi

    if test ! -e ~/.no-sudo; then
        if test "$(find $build_mount_p -maxdepth 1 -type l -prune -o -print | wc -l)" != 1 && yes-or-no-p -y "unmount $build_mount_p?"; then
            unshare-work
            sudo umount $build_mount_p || true
        fi

        test "$(find $build_mount_p -maxdepth 1 -type l -prune -o -print | wc -l)" = 1 || die "build_mount_p already mounted"
    fi
    echo "make: Entering directory \`$(pwd)'"
    (
        echo '# -*- mode: compilation -*-'
        echo "make: Entering directory \`$(lookup-file .repo/..)'"
        time sudo unshare -m -- bash -c '
                set -ex
                mount $(pwd) '$build_mount_p' -o bind;
                cd '$build_mount_p'
                su '$(whoami)' -c "
                    . ~/.bashrc;
                    . build/envsetup.sh
                    . .buildenv.sh
                    if test '${PATH_PREPEND}'x != x; then
                        PATH='$PATH_PREPEND':$PATH
                    fi
                    ONE_SHOT_MAKEFILE='$ONE_SHOT_MAKEFILE' make all_modules '"$(for x in "$@"; do printf %q\  "$x"; done)"'
                "
            ' 2>&1
    )|tee ~/.logs/mm.log.x | perl -npe "s,$build_mount_p,$top_dir,g"|tee ~/.logs/mm.log|
    grep --line-buffered -v '^Copy: .*/target/product/.*/system/media/audi'|
    grep --line-buffered -v -e '/lang_pico/\|libinputcore-2.so\|libkpencore.so\|libqpicjni6.so\|/root/initlogo.rle\|/system/app/BaiduIme_v2.1.1.6.apk\|/system/app/android_10503_20111014.apk\|/system/app/cn.goapk.market_v2.1.4.apk\|/system/app/com.alensw.picfolder_v1.4.2.apk\|/system/etc/apns-conf.xml\|/system/etc/permissions/com.tmobile.software.themes.xml\|/system/etc/repository.txt'|
    perl -ne 'print unless /unmappable character for encoding ascii/' |
    perl -npe 's/(\.o\(.*?\.o\):)/$1\n/'

    perl -npe 's!^#\$\(error stopping\)!\$(error stopping)!' -i build/core/main.mk
    echo OK
)
