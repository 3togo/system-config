#!/usr/bin/perl
use strict;
my %email_map;
my %phone_map;
my %name_phone_map;
my %phone_name_map;
my %name_email_map;
my %email_name_map;
use Getopt::Long;
use String::ShellQuote;
my $debug;
GetOptions(
    "d!" => \$debug,
    );

sub debug(@) {
    print STDERR "@_\n" if $debug;
}

sub checkNil($) {
    if ($_[0] eq "nil") {
        return "";
    }
    return $_[0];
}
sub unhex($) {
    my ($str) = @_;
    $str =~ s/=([a-f0-9]{2})/chr(hex("0x$1"))/egi;
    return $str;
}

sub dq($) {
    my ($str) = @_;
    debug "str is $str";
    $str =~ s/\QCHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:\E//g;
    $str =~ s/=([a-f0-9]{2})/chr(hex("0x$1"))/egi;
    $str =~ s/("|\\)/\\$1/g;
    $str = '"' . $str . '"';
    debug "str is $str";
    return $str;
}

while (<>) {
    if (m/^BEGIN:VCARD/) {
        my @names;
        my $fn;
        my @emails;
        my @phones;
        while (<>) {
            # [nil "艾迪" nil nil nil nil nil ("aidi@smartisan.com") ((creation-date . "2014-05-16 05:32:02 +0000") (timestamp . "2014-05-16 05:32:02 +0000")) nil]
            chomp;

            if (m/=$/) {
                my $line = $_;
                $line =~ s/=$//;
                do {
                    my $new_line = <>;
                    $new_line =~ s/^=//;
                    $line .= $new_line;
                    if ($new_line !~ m/=$/) {
                        last;
                    }
                    $line =~ s/=$//;
                } while (1);
                $_ = $line;
            }
            if (m/^(?:N:|N;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:)(.*)/) {
                @names = grep {m/./} split(';', unhex ($1));
            } elsif (m/^EMAIL:|EMAIL;TYPE=INTERNET:/) {
                push @emails, $';
            } elsif (m/^TEL;/) {
                my $phone = $';
                $phone =~ s/-//g;
                push @phones, $phone;
            } elsif (m/^(FN;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:|FN;)/) {
                $fn = unhex $';
            } elsif (m/^END:VCARD/) {
                my $firstName;
                my $lastName;
                my $phones;
                my $emails;
                my $name;
                if (@names) {
                    ($lastName, $firstName) = @names;
                    ($lastName, $firstName) = (dq($lastName), dq($firstName));
                    $name = join(";", @names);
                } else {
                    $firstName = "nil";
                    $lastName = dq($fn);
                    $name = join(";", "", $fn);
                }
                for (@phones) {
                    my ($type, $number) = split(':');
                    $name_phone_map{$name}{$number} = $type;
                    if ($phone_name_map{$number} eq $name) {
                        next;
                    } elsif ($phone_name_map{$number}) {
                        my $prompt = shell_quote("Which name do you want for $number");
                        my $name1 = shell_quote($name);
                        my $name2 = shell_quote($phone_name_map{$number});
                        $name = qx(select-args -p $prompt $name1 $name2);
                    }
                    $phone_name_map{$number} = $name;
                    $phones .= ($phones ? " " : '') . sprintf("[%s %s]", dq(lc $type), dq($number));
                }
                $phones = $phones ? sprintf("(%s)", $phones) : "nil";
                for (@emails) {
                    my $email = $_;
                    $emails .= ($emails ? " " : '') . dq($_);
                    $name_email_map{$name}{$email} = 1;
                    if ($email_name_map{$email} eq $name) {
                        next;
                    } elsif ($email_name_map{$email}) {
                        my $prompt = shell_quote("Which name do you want for $email");
                        my $name1 = shell_quote($name);
                        my $name2 = shell_quote($email_name_map{$email});
                        $name = qx(select-args -p $prompt $name1 $name2);
                    }
                    $email_name_map{$email} = $name;
                }
                $emails = $emails ? sprintf("(%s)", $emails) : "nil";
                if ($phones eq "nil" and $emails eq "nil") {
                    last;
                }
                last;
            }
        }
    }
}
