#!/bin/bash

# [[file:~/src/github/projects/abc.org::*%E6%9C%80%E7%BB%88%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%9A][the-ultimate-script]]

# The name abc stands for Android Build Cake. Android Build is a piece
 # of Cake.

 # All bash scripts should start with ~set -e~ to fail early and loudly.
 set -e

function die() {
    echo Error: "$@"
    exit -1
}

function repo() {
    ~/bin/repo "$@"
}

function android-make() {
    command android-make -j8 "$@"
}

function is-a-subdir() {
    dir1=$(readlink -f "$1")
    dir2=$(readlink -f "$2")
    # test if dir1 is in a subdir of $dir2
    dir2=$dir2/
    if test -e "$dir1" -a -d "$dir2"; then
        if test "$(echo "$dir1" | cut -b 1-${#dir2})" = "${dir2}"; then
            return 0;
        fi
    fi
    return 1
}

function clear_all_old_patches() {
    local repo_dir=$(lookup-file -e .repo)
    mkdir -p $repo_dir/patches
    for x in $(
                  cd $repo_dir/patches >/dev/null 2>&1;
                  for x in *; do
                      if test -f $x; then
                          echo *
                      fi
                  done
              ); do

        (
            cd $repo_dir/..
            project=${x//%/\/}
            cd $project
            if test ! -d .git; then
                die "not a project: $project"
            fi

            git reset --hard $(repo-remote-branch)
            git clean -xfd
        )
    done
}

function mark_a_patch() {
    local repo_dir=$(lookup-file -e .repo)
    mkdir -p $repo_dir/patches
    local project=$1
    (
        cd $repo_dir/patches
        touch ${project//\//%}
    )
}


function get-base-build() {
    review_id=$1
    if [[ "$review_id" =~ http:// ]]; then
        review_id=$(basename "$review_id")
    fi

    review_info=$(ssh smartisan gerrit query review_id)

    branch=$(echo "$review_info" | grep "^\s+branch:" -P | pn 2)
    project=$(echo "$review_info" | grep "^\s+project:" -P | pn 2)

    # fix me: how to calculate the base build for this?
    echo ~/buildfarm/sfo-rom
}

function get-base-build-from-branch() {
    local branch=$1
    if test "$branch" = sfo-rom; then
        echo ~/buildfarm/sfo-rom
    elif test "$branch" = icesky-r1221; then
        echo ~/buildfarm/icesky
    else
        die "Can't decide the base build for branch: '$branch'"
    fi
}

function remote-mm() {
    if git st -s | grep .; then
        git commit -m 'test-build' --amend -a >/dev/null 2>&1
        gerrit-push-review -n -R
    fi
    (cd ~; psync code3 system-config) >/dev/null 2>&1
    ssh -o RequestTTY=yes code3 abc build-request $(gerrit-review-url) -m dep "$@"
}

function build-request() {
    ## start generated code
    TEMP=$(getopt -o m:hd: --long "method:,help,dir:"  -n $(basename $0) -- "$@")
    method=mm
    mm_dir=
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -m|--method)
                method=$2
                shift 2
                ;;
            -h|--help)
                cat <<EOF
Usage: build-request -m|--method [mm|dep|full] [-d|--dir MM_DIR] [-c|--copy FILE|DIR]... [-t|--to COPY_TARGET] REVIEWS...

You can use this command to submit a build request using a gerrit
review, specify what to build, and what to copy back into your PC
using share folder.

-m|--method [mm|dep|full|kernel]
    MM means use android mm build
    DEP means build the whole dir, including DEPendencies
    FULL means to do a full build (need 5~8 minutes)
    KERNEL means to rebuild kernel and re-generate boot.img and the .ko files (wlan)

    Default is mm.

[-d|--dir MM_DIR] Specify where to do the build, if you are using mm
    or partial build with dependencies resolved.

    Default is the git project if there is an Android.mk in it's top
    folder.

REVIEWS are gerrit review urls or ids, such as http://172.16.0.9:8080/47807/ or 47807

EOF
                exit
                ;;
            -d|--dir)
                mm_dir=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                die "internal error"
                ;;
        esac
    done
    ## end generated code

    num_reviews=$#

    target_branch=

    declare -A review_patchset_map
    local old_review_id
    for review_id in "$@"; do
        old_review_id=$review_id
        if [[ "$review_id" =~ http:// ]]; then
            review_id=$(basename "$review_id")
        fi

        if ! echo "$review_id" | grep -q -P '^\d+$'; then
            die "review_id $review_id is not a number."
        fi

        review_info=$(ssh smartisan gerrit query --current-patch-set $review_id)
        branch=$(echo "$review_info" | grep "^\s+branch:" -P | pn 2)
        project=$(echo "$review_info" | grep "^\s+project:" -P | pn 2)
        patchset=$(echo "$review_info" | grep "^\s+ref:" -P | pn 2 | xargs basename)

        review_patchset_map[$old_review_id]=$review_id,$patchset

        if test ! "$target_branch"; then
            target_branch=$branch
            if test ! "$branch"; then
                die "Can't determine branch from then review"
            fi

            base_build=$(get-base-build-from-branch $target_branch)
            echo decided our base_build to be $base_build, will lock now

            exec 9> $base_build/.abc.lock
            flock 9

            (
                cd $base_build
                clear_all_old_patches
            )



        elif test "$target_branch" != "$branch"; then
            die "Your reviews have more than 1 branches: $target_branch and $branch"
        fi



        cd "$base_build"
        path=$(my-rfa 'if test "$(git-remote-url|perl -npe s,.*//.*?/,,)" = '$project'; then pwd; fi')
        if test ! -d "$path"; then
            die "Can't decide the path for review id: $review_id"
        fi

        (
            cd "$path"
            rev=$(echo "$review_info" | grep "^\s+ref:" -P | pn 2)
            git reset --hard
            git fetch $(repo-remote) $rev
            git merge --no-edit FETCH_HEAD || die "Can't merge the fetch head"
            mark_a_patch $(ap)
        )
    done

    if test "$method" = mm; then
        if test $num_reviews != 1; then
            die "mm can be used only if there is one review patch"
        fi

        if test -d "$mm_dir"; then
            (
                if ! is-a-subdir "$(readlink -f "$mm_dir")" "$base_build"; then
                    die "$mm_dir is not in Android dir"
                fi
                cd "$mm_dir"
                mm
            )
        elif test -e "$path"/Android.mk; then
            (
                cd $path
                mm;
            )
        else
            die "Can't find Android.mk in $path for mm build"
        fi
    elif test "$method" = dep; then
        if test -d "$mm_dir"; then
            (
                if ! is-a-subdir "$(readlink -f "$mm_dir")" "$base_build"; then
                    die "$mm_dir is not in Android dir"
                fi
                cd "$mm_dir"
                android-make -d .
            )
        else
            (
                cd $path
                android-make -d .
            )
        fi
    elif test "$method" = full; then
        android-make
    elif test "$method" = kernel; then
        android-make msm-kernel &&
            android-make bootimage-nodeps &&
            (cd vendor/qcom/opensource/wlan/prima && mm)
    else
        die "Can't build with method '$method'"
    fi

    for review_id in "$@"; do
        (
            set -x
            gerrit-build-review "$review_id" 1
        )
    done

    rsync out/target/product/*/system* out/target/product/*/boot* out/target/product/*/root /Share/abc/$(basename $base_build) -av
}

function list-base-builds() {
    cd ~/buildfarm/
    for x in *; do
        if test -d "$x"; then
            echo "$x"
        fi
    done
}


function refresh-base-builds() {
    cd ~/buildfarm/
    for x in */.repo/; do
        if test ! -d "$x"; then
            continue;
        fi
        (
            cd "$x"/manifests
            git reset --hard
            cd ../..
            android-make
            # fixme export the manifest.
        )
    done
}

function cron-daily-build() {

    (
        cd /data/mirror
        for gitd in $(find . -type d -name '*.git' -print -prune|grep -v /.git); do
            (
                cd $gitd
                for remote in $(git remote); do
                    command git fetch $remote
                done
            )
        done
    )

    for d in ~/buildfarm/*/; do
        if test ! -d "$d"; then
            continue;
        fi
        (
            cd "$d"/.repo/manifests
            git reset --hard
        )
        cd "$d"
        repo sync -j8 -d -c
        (
            android-make
            repo manifest -r -o .repo/manifest.xml.build
            cat .repo/manifest.xml.build > .repo/manifest.xml
        ) || (
            if test -e .repo/manifest.xml.build; then
                cat .repo/manifest.xml.build > .repo/manifest.xml
                repo sync -j8 -d -c
                android-make
            fi
        )
    done
}

function gerrit-build-review() {
    review_id=$1
    review_patch=${review_patchset_map[$review_id]}


    verified=${2:-1}
    if test "$verified" = 1; then
        message=$(
            cat <<EOF
Verified+1

This is an automated message from the Android Build Cake.

Everything merges and builds. Congratulations!
EOF
               )
    else
        message=$(
            cat <<EOF
Verified-1

Build failed.

This is an automated message from the Android Build Cake.

Please check the build log with this abc command:

    $(
        for x in "${abc_command[@]}"; do
            printf "%q " "$x"
        done
    )
EOF
               )
    fi
    ssh -i ~/.ssh/id_rsa_cmtest cmtest@code -p 29418 gerrit review "$review_patchset" --verified $verified -m "$(printf %q "$message")"
}

# some global variables
declare -A review_patchset_map

if test "$(readlink -f "$BASH_SOURCE")" = "$(readlink -f "$(echo "$0" | grep / || which "$0" 2>/dev/null)" )"; then
    if grep -q -P "^\s*function $1\s*\(" "$0" || test "$(basename $0)" = $1; then
        command=$1
        shift
        abc_command=("$command" "$@")
        "$command" "$@"
    fi
fi

# the-ultimate-script ends here
