#!/bin/bash

cd $(lookup-file .repo/..)
if test -e .buildenv.sh.x; then
    . .buildenv.sh.x
fi

if test -e .repo/AndroidKernel.mk; then
    cp .repo/AndroidKernel.mk kernel/
fi
build_env=`lookup-file build/envsetup.sh`
top_dir=$(pwd)

set -e

if test -e .afbrc; then
    . .afbrc
fi

rm out -rf # in case it's a dangling symlink.
if test "$hourly_build_debug" = true; then
    if test -e .patch_applied; then
        echo "Error: pateches applied"
        exit -1;
    else
        echo "Error: patches not applied"
        exit 0;
    fi
fi

test -d .repo -a -e build/envsetup.sh
jobs=$(cat /proc/cpuinfo |grep '^processor'|wc -l) #default
jobs=$((jobs * 2))
verbose=
config=
keep=-k
make_dir=
targets=
TEMP=$(getopt -o vd:kj:c: -n $(basename $0) -- "$@")
function die() {
    echo "$@"
    exit -1
}

eval set -- "$TEMP"
while true; do
    case "$1" in
        -k)
            keep=
            shift
            ;;
        -c)
            config=$2
            shift 2
            ;;
        -d)
            cd -
            make_dir=$(readlink -f $2)
            targets=$(
                cd $make_dir;
                find . -maxdepth 3 -name Android.mk |
                    xargs grep '^\s*LOCAL_MODULE\b.*=' -P |
                    perl -npe 's/.*=//' | tr \\n ' '
                   )

            cd -
            shift 2
            ;;
        -j)
            jobs=$2
            shift 2
            ;;
        -v)
            verbose=showcommands
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            die "internal error"
            ;;
    esac
done

cd $top_dir || exit
. build/envsetup.sh >/dev/null 2>&1

if test ! "$config" -a ! -e buildspec.mk; then
    die "lunch combo must be specified because a previous buildspec.mk is not found"
fi

if test -z "$config"; then

    config=$(
        cat buildspec.mk|perl -ne 'print $1 if /^\s*TARGET_PRODUCT\s*.?=\s*(.*?)\s*$/')-$(
        cat buildspec.mk|perl -ne 'print $1 if /^\s*TARGET_BUILD_VARIANT\s*.?=\s*(.*?)\s*$/')
    echo set the build for "$config"
fi

variant=${config##*-}

if test "$variant" = user -o "$variant" = userdebug -o "$variant" = eng && lunch "$config"; then
    true
else
    config=$(get_build_var TARGET_PRODUCT)-$(get_build_var TARGET_BUILD_VARIANT)
    echo using old config $config
    lunch $config
fi
export CCACHE_DIR=~/.ccache-$( (cat .repo/manifest.xml; echo $config) | md5sum | pn 1 | cut -b 1-6)
echo CCACHE_DIR is $CCACHE_DIR
rm ~/.ccache || rm -rf ~/.ccache
ln -s $CCACHE_DIR ~/.ccache
. ~/bin/.android-set-outdir
android-set-product
    # re-lunch, so that the ANDROID_PRODUCT_OUT can inherit from the new OUT_DIR
lunch $TARGET_PRODUCT-$TARGET_BUILD_VARIANT

export TARGET_PRODUCT=$TARGET_PRODUCT
export TARGET_BUILD_VARIANT=$TARGET_BUILD_VARIANT

if test "$DEBUG" = true; then
    set -x;
fi
(
    set -e
    test -d "$ANDROID_PRODUCT_OUT"
    cd "$ANDROID_PRODUCT_OUT"
    test -d .repo && die "can not do it; .repo means we are at android top."
    rm ../system.img ../obj/PACKAGING/systemimage_intermediates/system.img -vf
    # rm kernel telephony uboot-obm -rf # see what will happen?
) || true

test -e buildspec.mk || { echo no buildspec.mk, will exit now; echo please use android-make -c CONFIG, for e.g., aosp_x86-eng; exit; }

(
    time (
        set -e
        if pwd | grep -P -e '\d+-\d+'; then
            echo looks like a rolling back build dir, do not do code reading in it
        else
            touch .for-code-reading
        fi
        echo 'about to lock at '$(date)
        flock 9
        echo 'lock success! at '$(date)
        sudo umount ../.afb >/dev/null 2>&1 || true
        rm */out/ -rf || true
        if test "$DO_REPO_UPDATE" = true; then
            rm out/*/ -rf || true
        fi
        result=''
        export build_mount_p=$(readlink -f ../)/.afb
        mkdir -p $build_mount_p
        test "$(find $build_mount_p -maxdepth 1 -type l -prune -o -print | wc -l)" = 1 || die "mount point $build_mount_p not clean"
        time sudo env NO_PARALLEL_BUILD=$NO_PARALLEL_BUILD unshare -m -- bash -c "
            set -ex
            umount $build_mount_p >/dev/null 2>&1 || true
            mount $(pwd) $build_mount_p -o bind;
            cd $build_mount_p
            umount $OUT_DIR >/dev/null 2>&1 ||true
            mount $OUT_DIR_LONG $OUT_DIR -o bind
            perl -npe 's!^\\\$\(error stopping\)!#\\\$(error stopping)!' -i build/core/main.mk
            su $(whoami) -c '
                HOME=$HOME
                . ~/.bashrc;
                . .buildenv.sh;
                if test -e .buildenv.sh.x; then
                    set -x
                    . .buildenv.sh.x
                fi
                . ./build/envsetup.sh
                export PATH=$PWD/$OUT_DIR/host/linux-x86/bin/:\$PATH

                if test -d boot/uboot -a -d boot/obm; then
                    (cd boot/uboot; git add .; git clean -xfd) || true
                    (cd boot/obm;   git add .; git clean -xfd) || true
                fi

                if test $# != 0; then
                    if test $# = 1 -a $1 = msm-kernel; then
                        (
                            cd build/target/board
                            mm $(android-env get_build_var PRODUCT_OUT)/kernel -j$jobs $verbose
                        )
                    elif test $# = 1 -a $1 = lk; then
                        (
                            cd build/target/board
                            mm $(android-env get_build_var PRODUCT_OUT)/emmc_appsboot.mbn -j$jobs $verbose
                        )
                    else
                        schedtool -B -n 1 -e ionice -n 1 make -j$jobs $keep $* $verbose
                    fi
                elif test -z \"$NO_PARALLEL_BUILD\" -a -z \"\$NO_PARALLEL_BUILD\"; then
                    schedtool -B -n 1 -e ionice -n 1 make -j$jobs $keep $targets
                else
                    lunch $TARGET_PRODUCT-$TARGET_BUILD_VARIANT

                    if test -e flashing/quilt/$(repo-tracking)/do-no-parallel-build; then
                        bash flashing/quilt/$(repo-tracking)/do-no-parallel-build
                    else
                        bash flashing/quilt/do-no-parallel-build
                    fi
                fi
            '
        " && result=$result'all ok; ' && echo build is successful &&
        (
            if test ! -d flashing; then
                exit 0
            fi
            cd flashing
            ./make-links.sh
            dest=$(android-env get_abs_build_var OUT_DIR)/flashing/
            mkdir -p $dest
            DO_SYMLINK=true ./copy-release.sh $dest
        ) || true
        if test -e .afb-do-repo-changes; then
            echo -n 'after build, ccache stat is '
            ./prebuilt/linux-x86/ccache/ccache -s
        fi
        echo
        echo "full build result is $result"
        echo
    )
) 9>.android-full-build.lock  2>&1 | tee build.log out/build.log
if test "$#" = 0; then
    mv out/build.log out/full-build.log
fi
perl -npe 's!^#\$\(error stopping\)!\$(error stopping)!' -i build/core/main.mk
grep -Hn -e 'full build result is' build.log | grep -e "all ok" # make sure it exit with the right return value
